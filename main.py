import random
#The purpose of this program is to aid in inventory management at the local restaurant: "Spurghetters"

#Establishing Static Meal Ingredient Variables Used
'''
The meatballs and patties will both be using the same meat supply,
so that needs to be taken into account.

Additionally, ingredient amounts will be listed as per serving.
The types of measurements will vary from pounds to ounces.
'''
#buns will be considered separate in this program
buns = 2
patty = .25
cheese = 1
spaghetti = 2
sauce = 4
meatball = .03
potato = .63
macaroni = 2
lettuce = 1
carrot = .25
crouton = 5
onion = .5
tomato = 5
#salt will be tricky, and to make it simple, we'll use the same per dish (tsp)
salt = .5

#Establishing Bulk Orders
'''This area is to keep track of how much of the starting bulk supply of the ingredients is. This will be handy when figuring out when is a good time to start ordering more ingredients. Keep in mind that bulk patty will cover the meat necessary for meatballs as well. The types of measurements will vary from pounds to ounces.
*will be represented as b_'''

'''Box will be measured by how many individual packs fit into the measurement box (the cardboard box in my room). 
For Example: 
1 pack of hamburger buns contains 8 buns (as half). The box in my room will hold 9 packs.
Box Bun order would be 9x8: 72 buns(top and bottom)'''

b_buns = 72
b_meat = 12
b_cheese = 36 
b_spag = 75
b_sauce = ""
b_potato = ""
b_macaroni = ""
b_lettuce = ""
b_carrot = ""
b_crouton = ""
b_onion = ""
b_tomato = ""
b_salt = 122.75

'''
Also keep in mind that you will need variables to keep track of the ingredients that were used throughout the day, but this could be part of your randomization function. You just need to make sure to return the value and that it subtracts from the bulk order

Sample conditional: psuedocode
if stock_item is less than or equal to 1/3 of the bulk order: 
  Restaurant should put in an order.
  
'''
'''1225 is the average traffic weekly.
If we go off the idea that each dish is ordered equally, 408 is our starting ingredient supply multiple to start off the week'''

#Establishing Item Stock
#listed by individual ingredient
stock_buns = 1632
stock_meat = 217.6
stock_cheese = 408
stock_spag = 816
stock_sauce = 300
stock_potato = ""
stock_macaroni = ""
stock_lettuce = ""
stock_carrot = ""
stock_crouton = ""
stock_onion = ""
stock_tomato = ""
stock_salt = 612.5

#Establishing Entree Lists
hamburger = [buns, patty, salt]
cheeseburger = [buns, patty, salt, cheese]
spag_n_meat = [spaghetti, salt, sauce, meatball]

#Establishing Side Lists
fries = [potato, salt]
mac_n_cheese = [macaroni, cheese]
salad = [lettuce, carrot, crouton, onion, tomato]

#Establishing Optional Lists
entrees = [hamburger, cheeseburger, spaghetti]
sides = [fries, mac_n_cheese, salad]
'''I'm pretty sure that the above code isn't really necessary (hence the name), but you never know.'''

#Restock Info
'''This is here for the computer to check supply. 
It's Max Shipment / 5 (5 is to signify an estimate of the amount of days we would probably be able to last on current supply while taking the 7 day shipment static into account)
This information is based on an average generated by analyzing the number of items used per day.'''
#by the pallet
re_buns = 1800/5
re_meat = 450/5
re_cheese = 9000/5
re_spag = 1875/5
re_sauce = 300/5
re_potato = 50/5
re_macaroni = 2250/5
re_lettuce = ""
re_carrot = ""
re_crouton = ""
re_onion = ""
re_tomato = ""
re_salt = 122.75


#Stock Subtraction (Hamburgers)
def stock_sub_ham(burgers_daily, hamburger, stock_buns, stock_meat,stock_salt):
  global leftover_buns
  global leftover_meat
  global leftover_salt
  
  print("Starting Stock Buns by Bun")
  print(stock_buns)
  print("Starting Stock Meat by Pound")
  print(stock_meat)
  print("Starting Stock Salt by Ounce")
  print(stock_salt)

  while len(burgers_daily) > 0:
    buns_used = hamburger[0] * burgers_daily[0]
    meat_used = hamburger[1] * burgers_daily[0]
    salt_used = hamburger[2] * burgers_daily[0]
    #print("Buns Used:")
    #print(buns_used)
    #print("Meat Used:")
    # print(meat_used)
    # print("Salt Used:")
    # print(salt_used)
    stock_buns = stock_buns - buns_used
    stock_meat = stock_meat - meat_used
    stock_salt = stock_salt - salt_used
    # print("Bun Stock")
    # print(stock_buns)
    # print("Meat Stock")
    # print(stock_meat)
    # print("Salt Stock")
    # print(stock_salt)
    burgers_daily.pop(0)
  
  # print("Leftover Stock Buns")
  # print(stock_buns)
    leftover_buns = stock_buns
  # print("Leftover Stock Meat")
  # print(stock_meat)
    leftover_meat = stock_meat
  # print("Leftover Stock Salt")
  # print(stock_salt)
    leftover_salt = stock_salt
  
  return(leftover_buns, leftover_meat, leftover_salt)


#Stock Subtraction (Cheeseburgers)
def stock_sub_cheese(cheese_daily, cheeseburger, stock_buns, stock_meat, stock_salt, stock_cheese): 
  global leftover_buns
  global leftover_meat
  global leftover_salt
  global leftover_cheese
  print("Starting Stock Buns by Bun")
  print(stock_buns)
  print("Starting Stock Meat by Pound")
  print(stock_meat)
  print("Starting Stock Salt by Ounce")
  print(stock_salt)
  print("Starting Cheese by Slice")
  print(stock_cheese)
  
  while len(cheese_daily) > 0:
    buns_used = cheeseburger[0] * cheese_daily[0]
    meat_used = cheeseburger[1] * cheese_daily[0]
    salt_used = cheeseburger[2] * cheese_daily[0]
    cheese_used = cheeseburger[3] * cheese_daily[0]
    #print("Buns Used:")
    #print(buns_used)
    #print("Meat Used:")
    # print(meat_used)
    # print("Salt Used:")
    # print(salt_used)
    stock_buns = stock_buns - buns_used
    stock_meat = stock_meat - meat_used
    stock_salt = stock_salt - salt_used
    stock_cheese = stock_cheese - cheese_used
    # print("Bun Stock")
    # print(stock_buns)
    # print("Meat Stock")
    # print(stock_meat)
    # print("Salt Stock")
    # print(stock_salt)
    cheese_daily.pop(0)
  
  # print("Leftover Stock Buns")
  # print(stock_buns)
    leftover_buns = stock_buns
  # print("Leftover Stock Meat")
  # print(stock_meat)
    leftover_meat = stock_meat
  # print("Leftover Stock Salt")
  # print(stock_salt)
    leftover_salt = stock_salt
    leftover_cheese = stock_cheese
  
  return(leftover_buns, leftover_meat, leftover_salt, leftover_cheese)

#Stock Subtraction (Spaghetti)
def stock_sub_spag(spag_daily, spag_n_meat, stock_spag, stock_meat, stock_sauce, stock_salt): 
  global leftover_spag
  global leftover_meat
  global leftover_salt
  global leftover_sauce
  print("Starting Stock Spaghetti by Ounces")
  print(stock_spag)
  print("Starting Stock Meat by Pound")
  print(stock_meat)
  print("Starting Stock Salt by Ounce")
  print(stock_salt)
  print("Starting Sauce by Ounce")
  print(stock_sauce)
  #spag_n_meat = [spaghetti, meatball, salt, sauce]
  while len(spag_daily) > 0:
    spag_used = spag_n_meat[0] * spag_daily[0]
    meat_used = spag_n_meat[1] * spag_daily[0]
    salt_used = spag_n_meat[2] * spag_daily[0]
    sauce_used = spag_n_meat[3] * spag_daily[0]
    #print("Buns Used:")
    #print(buns_used)
    #print("Meat Used:")
    # print(meat_used)
    # print("Salt Used:")
    # print(salt_used)
    stock_spag = stock_spag - spag_used
    stock_meat = stock_meat - meat_used
    stock_salt = stock_salt - salt_used
    stock_sauce = stock_sauce - sauce_used
    # print("Bun Stock")
    # print(stock_buns)
    # print("Meat Stock")
    # print(stock_meat)
    # print("Salt Stock")
    # print(stock_salt)
    spag_daily.pop(0)
  
  # print("Leftover Stock Buns")
  # print(stock_buns)
    leftover_spag = stock_spag
  # print("Leftover Stock Meat")
  # print(stock_meat)
    leftover_meat = stock_meat
  # print("Leftover Stock Salt")
  # print(stock_salt)
    leftover_salt = stock_salt
    leftover_sauce = stock_sauce
  
  return(leftover_spag, leftover_meat, leftover_salt, leftover_sauce)


def restock_check(current_stock, restock_amount):
  if current_stock < restock_amount:
    print("Sending in re-stock order.")
  else:
    print("Stock is sufficient.")

###Random Program###
def random_customer_orders():
  global burgers_daily
  global cheese_daily
  global spag_daily
  choice1 = "hamburger"
  choice2 = "cheeseburger"
  choice3 = "spag_n_meat"
  choice_list = [choice1, choice2, choice3]
#The visits were based off a google search for average customers a day
  customer_orders = []
  customer_weekly = []
#This list will list days in groups of three (ham, cheese, spag)
  orders_daily = []
  burgers_daily = []
  cheese_daily = []
  spag_daily = []

  while len(customer_weekly) < 7:
    customer_visits = random.randint(100,250)
  #instead of doing it day to day, generate 7 days right off the bat, then randomize the orders with the code you used originally. your problem is making a list of 7 random counts
    customer_weekly.append(customer_visits) 
    while customer_visits > 0:
      customer_orders.append(random.choice(choice_list))
      customer_visits = customer_visits - 1
    orders_daily.append("Day:" + str(len(customer_weekly)))
  #print(len(customer_orders))
  #print("# of Hamburgers")
  #print(customer_orders.count(choice1))
    burgers_daily.append(customer_orders.count(choice1))
  #print("# of Cheeseburgers")
  #print(customer_orders.count(choice2))
    cheese_daily.append(customer_orders.count(choice2))
  #print("Spaghetti and Meatballs")
  #print(customer_orders.count(choice3))
    spag_daily.append(customer_orders.count(choice3))
  #need to clear customer_orders list at the end of each iteration
  #print("Totals Daily:")
  #print(len(customer_orders))
    customer_orders.clear()
 
  return (burgers_daily, cheese_daily, spag_daily)
'''After running the program, we will operate under the assumption that 175 is the global average for our branch.'''

# #Testing out the burger function program and UX design
# print("--------------------------------")
# print("THIS IS WHERE THE PROGRAM BEGINS")
# print("--------------------------------")
# print()
# print("Initiating Randomization Program...")
# print()
# random_customer_orders()
# print("--------------------------")
# print("MEALS ORDERED FOR THE WEEK")
# print("--------------------------")
# print("Burgers:")
# print(burgers_daily)
# print("Cheese Burgers")
# print(cheese_daily)
# print("Spaghetti N' Meatballs")
# print(spag_daily)
# print()
# print("--------------")
# print("CHECKING STOCK")
# print("--------------")
# stock_sub_ham(burgers_daily, hamburger, stock_buns, stock_meat,stock_salt)
# print()
# print("----------------------")
# print("SUBTRACTION INITIATING")
# print("----------------------")
# print("Starting Stock")
# print(stock_buns, stock_meat, stock_salt) 
# print("Stock Depleted")
# print((stock_buns - leftover_buns),(stock_meat - leftover_meat), (stock_salt - leftover_salt))
# print("New Stock")
# print(leftover_buns, leftover_meat, leftover_salt)
# stock_buns = leftover_buns
# stock_meat = leftover_meat
# stock_salt = leftover_salt

# print()
# print("-------------")
# print("RESTOCK CHECK")
# print("-------------")
# restock_check(stock_buns, re_buns)

###Testing Out CheeseBurger Function
# print("--------------------------------")
# print("THIS IS WHERE THE PROGRAM BEGINS")
# print("--------------------------------")
# print()
# print("Initiating Randomization Program...")
# print()
# print("--------------------------")
# print("MEALS ORDERED FOR THE WEEK")
# print("--------------------------")
# print("Burgers:")
# print(burgers_daily)
# print("Cheese Burgers")
# print(cheese_daily)
# print("Spaghetti N' Meatballs")
# print(spag_daily)
# print()
# print("--------------")
# print("CHECKING STOCK")
# print("--------------")
# stock_sub_cheese(cheese_daily, cheeseburger, stock_buns, stock_meat, stock_salt, stock_cheese)
# print()
# print("----------------------")
# print("SUBTRACTION INITIATING")
# print("----------------------")
# print("Starting Stock")
# print(stock_buns, stock_meat, stock_salt, stock_cheese) 
# print("Stock Depleted")
# print((stock_buns - leftover_buns),(stock_meat - leftover_meat), (stock_salt - leftover_salt), (stock_cheese - leftover_cheese))
# print("New Stock")
# print(leftover_buns, leftover_meat, leftover_salt, leftover_cheese)
# stock_buns = leftover_buns
# stock_meat = leftover_meat
# stock_salt = leftover_salt
# stock_cheese = leftover_cheese

# print()
# print("-------------")
# print("RESTOCK CHECK")
# print("-------------")
# restock_check(stock_buns, re_buns)

#Testing Spaghetti Function
print("--------------------------------")
print("THIS IS WHERE THE PROGRAM BEGINS")
print("--------------------------------")
print()
print("Initiating Randomization Program...")
random_customer_orders()
print()
print("--------------------------")
print("MEALS ORDERED FOR THE WEEK")
print("--------------------------")
print("Burgers:")
print(burgers_daily)
print("Cheese Burgers")
print(cheese_daily)
print("Spaghetti N' Meatballs")
print(spag_daily)
print()
print("--------------")
print("CHECKING STOCK")
print("--------------")
stock_sub_spag(spag_daily, spag_n_meat, stock_spag, stock_meat, stock_salt, stock_sauce)
print()
print("----------------------")
print("SUBTRACTION INITIATING")
print("----------------------")
print("Starting Stock")
print(stock_spag, stock_meat, stock_salt, stock_sauce) 
print("Stock Depleted")
print((stock_spag - leftover_spag),(stock_meat - leftover_meat), (stock_salt - leftover_salt), (stock_sauce - leftover_sauce))
print("New Stock")
print(leftover_spag, leftover_meat, leftover_salt, leftover_sauce)
stock_buns = leftover_spag
stock_meat = leftover_meat
stock_salt = leftover_salt
stock_cheese = leftover_sauce

print()
print("-------------")
print("RESTOCK CHECK")
print("-------------")
restock_check(stock_spag, re_spag)


#program works by the week, but make sure to add user input so that the program can run based off of choice. 
#May also need to adjust a day-to-day code that can check more specifically when to put in a restock order.
#for example: LOOP 
###run a check for the list[0] orders. restock where needed, .pop the list[0], then run it again. Print out the ingredient supply, maybe list the percentage of ingredient left, and in the restock statement, say what was ordered for restock.

'''Beginning of the Main Loop'''